services:
  postgres:
    image: pgvector/pgvector:pg16
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.pgsql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ai_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 5

  mcp_server:
    build:
      context: ./mcp_server
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
    ports:
      - "8001:8001"
    volumes:
      - ./mcp_server:/app
    networks:
      - ai_network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      # Assuming mcp_server has a /health endpoint. Adjust if necessary.
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  fastapi_app:
    build:
      context: ./fastapi_app
      dockerfile: Dockerfile
    environment:
      MCP_SERVER_URL: http://mcp_server:8001
      GEMINI_API_KEY: ${GEMINI_API_KEY}
    ports:
      - "8000:8000"
    volumes:
      - ./fastapi_app:/app
    networks:
      - ai_network
    depends_on:
      mcp_server:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  ai_network:
    driver: bridge
